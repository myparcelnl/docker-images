name: 'Build php-xd images'

on:
  push:
    branches:
      - main

    paths:
      - images/php-xd/**/*

  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE: myparcelnl/php-xd
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        php: [ '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2' ]
        alpine: [ '3.12', '3.13', '3.14', '3.15', '3.16', '3.17', '3.18', '' ]
        type: [ '-fpm', '-cli', '' ]
    steps:
      - uses: actions/checkout@v3

      - uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - id: prepare
        run: |
          echo "identifier=${{ matrix.php }}${{ matrix.type }}-alpine${{ matrix.alpine }}" >> $GITHUB_OUTPUT

      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          tags: |
            type=raw,value=latest,suffix=-${{ steps.prepare.outputs.identifier }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ steps.prepare.outputs.identifier }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch,suffix=-${{ steps.prepare.outputs.identifier }}
            type=ref,event=tag,suffix=-${{ steps.prepare.outputs.identifier }}
            type=ref,event=pr,suffix=-${{ steps.prepare.outputs.identifier }}
            type=sha,suffix=-${{ steps.prepare.outputs.identifier }}

      - uses: docker/build-push-action@v3
        continue-on-error: true
        with:
          context: images/php-xd
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine }}
            PHP_VERSION=${{ matrix.php }}
            TYPE=${{ matrix.type }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          platforms: 'linux/amd64,linux/arm64'
          cache-from: type=gha,scope=build-${{ steps.prepare.outputs.identifier }}
          cache-to: type=gha,scope=build-${{ steps.prepare.outputs.identifier }},mode=max
